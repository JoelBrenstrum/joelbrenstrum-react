{"version":3,"sources":["content/face.jpeg","tic-tac/tic-tac.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Square","props","react_default","a","createElement","className","onClick","value","calculateWinner","squares","lines","i","length","_lines$i","Object","slicedToArray","b","c","Board","_this","this","renderSquare","React","Component","Game","_React$Component2","_this2","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","history","Array","fill","stepNumber","xIsNext","inherits","createClass","key","slice","setState","concat","step","status","_this3","current","winner","moves","map","move","desc","jumpTo","tic_tac_Board","handleClick","App","src","face","alt","href","target","rel","tic_tac_tic_tac","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6133e4d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/face.36e14f9d.jpeg\";","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./tic-tac.css\";\n\nfunction Square(props) {\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nfunction calculateWinner(squares) {\n    const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n\nclass Board extends React.Component {\n\n    renderSquare(i) {\n        return <Square value={this.props.squares[i]} onClick={() => this.props.onClick(i)} />;\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport class Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          history: [{\n            squares: Array(9).fill(null),\n          }],\n          stepNumber: 0,\n          xIsNext: true,\n        };\n      }\n\n      handleClick(i) {\n        const history = this.state.history;\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n        this.setState({  history: history.concat([{\n            squares: squares,\n          }]),\n          stepNumber: history.length,\n           xIsNext: !this.state.xIsNext });\n    }\n\n    jumpTo(step) {\n        this.setState({\n          stepNumber: step,\n          xIsNext: (step % 2) === 0,\n        });\n      }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        const moves = history.map((step, move) => {\n            const desc = move ?\n              'Go to move #' + move :\n              'Go to game start';\n            return (\n              <li key={move}>\n                <button onClick={() => this.jumpTo(move)}>{desc}</button>\n              </li>\n            );\n          });\n\n          \n        let status;\n        if (winner) {\n          status = 'Winner: ' + winner;\n        } else {\n          status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board squares={current.squares} onClick={(i) => this.handleClick(i)}/>\n                </div>\n                <div className=\"game-info\">\n                    <div>{ status }</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Game;\n// ========================================\n\n//ReactDOM.render(<Game />, document.getElementById(\"root\"));\n","import React, { Component } from 'react';\nimport face from './content/face.jpeg';\nimport Game from './tic-tac/tic-tac'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <p>\n            <code>v2</code>\n          </p>\n          <img src={face} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Joel Brenstrum <code>webdev</code>\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://joel.brenstrum.com\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            v1\n          </a>\n          <Game/>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}